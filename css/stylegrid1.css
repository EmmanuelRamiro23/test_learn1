* {
    padding: 0;
}

html,
body {
    height: 100%;
    margin: 0px;
    padding: 0px;
}

.grid-container {
    background-color: skyblue;
    height: 50vh;
    display: grid;
    /*Definimos los tamanos de las ancho de las columnas, que en este caso son 3*/
    /*grid-template-columns: 1fr 2fr 2fr;*/
    /*Auto-fit busca que todos los divs se ajusten al contenedor pero que nunca sobrepasen el valor minimo,
    si es que hay espacio disponible sino salta a la siguiente fila, siempre usa el valor mayor*/
    /*Auto fill siempre se encargara de mantener la estructura del grid, osea que las columnas no dependen del numero de elementos, sino que las crea aunque esten vacias, osea que 
    prepara espacio cuando sabemos que vendran mas elementos jaja*/
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-auto-rows: 200px;
    /*Definimos el tamano de la altura de las filas, que en este caso son dos filas*/
    /*grid-template-rows: repeat(2, 1fr);*/
    /*Definimos los espacios entre filas y columnas con las propiedades, aunque podemos tambien usar la propiedad
    de atajo de gap para ambos sentidos*/
    row-gap: 10px;
    column-gap: 15px;
}

.grid-item {
    /*Usamos el 50% de su celda, osea 100px*/
    height: 50%;
    background-color: red;
    border: 2px solid black;
}

.grid-container2 {
    background-color: skyblue;
    height: 60vh;
    display: grid;
    /*Alineamos los elementos tanto en el eje principal como en el eje secundario*/
    /*En este caso los mandamos al centro del contenedor, justify-items y align-items trabajan para el item dentro de la celda*/
    justify-content: center;
    align-content: center;
    /*Damos el tamano de las celdas que en este caso son 3*/
    grid-template-columns: repeat(3, 100px);
    /*Definimos la altura de todas las celdas del layout grid*/
    grid-template-rows: repeat(2, 100px);
    /*Aca no va a funcionar grid-auto-flow porque auto-rows crea filas extra, y cuando usamos auto-flow en columns lo elementos se
    acomodan en las columnas y no en las filas, por lo que no se crean filas extras
    grid-auto-rows: 100px;*/
    /*Definimos el flujo de los elementos dentro del Grid*/
    /*grid-auto-flow: column;*/
    grid-auto-flow: column;
    row-gap: 10px;
    column-gap: 10px;

}


/*Veamos los elementos por area*/
.grid-area {
    height: 100%;
    background-color: aqua;
    display: grid;
    /*Aca creamos las areas*/
    /*Aca el punto . ignora los espacios*/
    grid-template-areas: "head head head"
        "menu content sidebar"
        "footer footer footer";
    /*No se pueden partir elementos por la mitad*/
    /*Definimos el tamano de cada una de las filas*/
    grid-template-rows: 10% 70% 10%;
    padding: 1px;
    gap: 5px;
}

@media(width < 413px) {
    .grid-area {
        grid-template-areas: "head"
            "menu"
            "content"
            "sidebar"
            "footer";
        grid-template-rows: repeat(5, 1fr);
    }

    .grid-irregular {
        .item-irregular-1 {
            grid-column-start: 2;
            grid-column-end: 4;
        }
    }

}

/*Asignamos un area a cada elemento*/
.item-area-1 {
    /*Aca usa el 50% de los 100% de altura de la celda que en este caso son 50px*/
    height: 100%;
    grid-area: head;
    background-color: red;
    display: flex;
    align-items: center;
    gap: 5px;
}

.subdiv {
    flex: 1 1 200px;
    height: 50%;
    background-color: blue;
}

.item-area-2 {
    border: 2px solid black;
    grid-area: menu;
    background-color: blue;
}

.item-area-3 {
    grid-area: content;
    background-color: green;
}

.item-area-4 {
    grid-area: sidebar;
    background-color: yellow;
}

.item-area-5 {
    grid-area: footer;
    background-color: purple;
}

/*Ahora veamos lo que son las celdas irregulares o cuando las celdas no completan el ancho de un contenedor bb*/
.grid-irregular {

    background-color: #008000;
    display: grid;
    /*Esto siemore lo va a respetar, y seguira trabajando de forma normal, soloq que la altura de las filas normales tendran los 50px, sino de forma normal llenara el contendor completo con todas sus celdas*/
    grid-auto-rows: 50px;
    gap: 5px;

}

/*Damos un tamano especifico a cada elemento*/
.irregu {
    background-color: red;
}

.item-irregular-1 {
    /*Aca el elemento abarcara hasta la columna 2. que es su gap 3 el del lado derecho*/
    background-color: blue;
    grid-column-start: 1;
    grid-column-end: 3;
    grid-row-start: 3;
}

.item-irregular-2 {
    grid-row-start: 1;
    grid-row-end: 3;
}

.item-irregular-3 {
    grid-column-start: 2;
    grid-column-end: 4;
}

.item-irregular-4 {
    grid-row-start: 1;
    grid-row-end: 4;
}

.item-irregular-5 {
    grid-row-start: 4;
    grid-row-end: 5;
    grid-column-start: 1;
    grid-column-end: 4;
}

.item-irregular-6 {
    grid-column-start: 2;
    grid-column-end: 4;
}